什么是jdbc

1 jdbc API 封装了数据库的访问方法
2 JDBC 由一套接口组成，统一了数据库访问规则。
3 由数据库厂商提供 JDBC 接口的实现。称为驱动
4 使用JDBC时候，实际上使用的是驱动提供的实现类！


加载数据库驱动：

class Foo{
  int n = 5;
}

编译以后 Foo.class

Foo f = new Foo(); //自动加载类 Foo.class 到
                   // 方法区
                   
class Koo{
  int b = 4;
}
//编译以后 Koo.class
Class.forName("Koo"); //将类 Koo.class 手动
                      //加载到 方法去
                 
Class.forName("oracle.jdbc.OracleDriver");   
利用Class.forName 加载数据库的驱动到内存中。

  
执行SQL
  Statement 对象用于执行SQL语句：将SQL发送到
  数据库并且执行
  
  Statement.execute(sql) 一般用来执行DDL
  返回值 boolean,true时候表示有结果集（执行DQL时候）！
  
  Statement.executeQuery(DQL) 用于执行查询
  返回ResultSet，ResultSet代表2维查询结果
  
  Statement.executeUpdate(DML) 用于执行DML
  返回int类型，表示DML语句影响的行数！
  
  
  JDBC 的使用步骤
    1 注册驱动（加载驱动）目的：加载JDBC的实现类型
    2 连接到数据，创建Connection对象，目的
      就是连接 Java程序和数据库直接的通讯通道（tcp）
    3 创建Statement(语句)对象，底层是流，向服务器
    发送SQL
    4 执行SQL，是利用Statement 对象的方法将SQL
      发送到的数据库，并且由数据库执行！
    5 处理SQL执行的结果：boolean int ResultSet
    6 关闭连接 conn.close(),关闭tcp
  
  “迭代器模式”
 如何处理DQL查询结果(ResultSet)
   ResultSet rs = st.executeQuery(dql);
   while(rs.next()){
     //处理每一行数据
     int id = rs.getInt("deptno");
     String name = rs.getString("dname");
     System.out.println(id+","+name);
   } 
   
 案例：检查ResultSet接口的实现类的类型，并在jar包
     找到这个类。
   System.out.println(
     rs.getClass().getName());  
 
  
  Java 中的一个对象可以映射到数据库的一行数据
  
  Java:
  Dept d1 = new Dept(1, "Java");
  
  数据库：
  dept(  deptno, dname  )
           1      Java
  
  JDBC实践：将Java中的数据对象，保存到数据库
   从数据库中读取数据到对象！
   
   
  连接池：
  1：低并发情况下，可以立即获得连接，性能好
  2：可以尽量的重用连接，资源利用率高，节省资源开销
  3：在高并发的情况下，可以保护数据库，避免连接过载（性能不高）
  
  连接池实现接口 DataSource(数据源)
  连接池=数据源 
    
    
     
  
    
  
  
  
                   
                   











