回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(一般都是以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:循环过程中所改变的那个量
3.while:先判断后执行，有可能一次都不执行
  do...while:先执行一次再判断，至少执行一次
  for:应用率最高的
4.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环



学习阶段
代数
生敲


敲着敲着，就明白了


又懂，还能敲出来
int count=1;
while(count<10){
  count++;
}
System.out.println(count); //10


int count;
for(count=1;count<10;count++){
}
System.out.println(count); //10













笔记:
1.三种循环更佳适用情况:
  1)while:"当..."循环
  2)do..while:"直到..."循环
              第1要素与第3要素相同时首选
  3)for:固定次数循环，应用率最高
2.嵌套循环:
  1)循环中套循环，多行多列时使用，
    外层控制行，内层控制列
  2)执行过程:外层走一次，内层走所有次
  3)建议:嵌套层次越少越好
    能用一层就不用两层，能用两层就不用三层
    若需求必须通过三层以上来解决，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
  1)算法:解决问题的流程/步骤(顺序、分支、循环)
    数据结构:将数据按照某种特定的结构来保存
             数怎么存
  2)设计良好的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)数组是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[10];
  4)数组的初始化:
      int[] arr = new int[3];       //0,0,0
      int[] arr = {1,4,7};          //1,4,7
      int[] arr = new int[]{1,4,7}; //1,4,7
      int[] arr;
      arr = {1,4,7}; //编译错误
      arr = new int[]{1,4,7}; //正确
  5)数组的访问
    5.1)通过数组名.length获取数组的长度
        int[] arr = new int[3];
        System.out.println(arr.length); //3
    5.2)通过下标/索引来访问数组中的元素
        下标从0开始，最大到数组.length-1
	int[] arr = new int[3];
        arr[0] = 100; //给arr中的第1个元素赋值为100
        arr[1] = 200;
	arr[2] = 300;
	arr[3] = 400; //异常(数组下标越界)
        System.out.println(arr[arr.length-1]); //输出数组中的最后一个元素
	arr[arr.length-1] = 800;
  6)数组的遍历:
      int[] arr = new int[3];
      for(int i=0;i<arr.length;i++){
        arr[i] = 100;
      }
      for(int i=0;i<arr.length;i++){
        System.out.println(arr[i]);
      }
      for(int i=arr.length-1;i>=0;i--){
        System.out.println(arr[i]);
      }
  7)数组的复制:
      System.arraycopy(a,1,a1,0,4);
      int[] a1 = Arrays.copyOf(a,6);
      a = Arrays.copyOf(a,a.length+1);
  8)数组的排序:
      Arrays.sort(arr); //arr升序排
      冒泡排序


任务:
1.冒泡经典案例
  要求:
    1)声明int型数组arr，包含10个元素
    2)给arr中每个元素赋值为0到99之间的随机数
      输出arr中的每一个元素
    3)使用冒泡算法对arr进行升序排列
    4)输出arr排序后的数据
2.课后作业+每日一练+经典案例



每周一做------自己先做，同学讨论
        ------项目经理给大讲一下





冒泡原理:
1)四个数冒3轮
2)每一轮都是从第1个元素开始比，
  每一次都是和它的下一个元素比
  若符合条件则交换
3)冒出来的数就不带它玩了

     arr.length-1-i
i=0  比3次
i=1  比2次
i=2  比1次


for(int i=0;i<arr.length-1;i++){ //控制轮
  for(int j=0;j<arr.length-1-i;j++){ //控制每轮的次数
    if(arr[j]>arr[j+1]){ //每次和它下一个元素比
      int t=arr[j];
      arr[j]=arr[j+1];
      arr[j+1]=t;
    }
  }
}




int[] arr = {89,23,36,1}; //升序
第一轮:
  89和23比，换，23,89,36,1
  89和36比，换，23,36,89,1
  89和1比， 换，23,36,1,89-----89冒出来了
第二轮:
  23和36比，不换
  36和1比， 换，23,1,36,89-----36冒出来了
第三轮:
  23和1比， 换，1,23,36,89-----23冒出来了














long a = System.currentTimeMillis();
快速排序
long b = System.currentTimeMillis();

System.out.println(b-a); //1000










交换次数越少，则效率越高

10万-------插入排序最快
10万-------冒泡排序最快
10万-------快速排序最快











设计良好的数据结构会导致好的算法

int a=5,b=8,c=6;
若a>b则换，保证a<b
若a>c则换，保证a<c
若b>c则换，保证b<c














int[] arr = {10,20,30,40,50};
int[] arr1 = new int[6]; //0,0,0,0,0,0



for(int i=0;i<arr.length;i++){
  arr1[i]=arr[i];
}

arr1[0]=arr[0];
arr1[1]=arr[1];
arr1[2]=arr[2];
arr1[3]=arr[3];
arr1[4]=arr[4];








int[] arr = {1,25,67,4};
找最大值算法:
1.假设第1个数为最大值
  int max=arr[0];
2.遍历剩余元素，将每个元素与max对比，
  若剩余元素大于max，修改max的值为较大的
  for(int i=1;i<arr.length;i++){
    if(arr[i]>max){
      max=arr[i];
    }
  }

max=1 max=25 max=67






int[] arr = new int[300]; //0,0,0
for(int i=0;i<arr.length;i++){
  arr[i] = 100;
}

i=0 arr[0]=100
i=1 arr[1]=100
i=2 arr[2]=100




arr[0]=100;
arr[1]=100;
arr[2]=100;
System.out.println(arr[0]);
System.out.println(arr[1]);
System.out.println(arr[2]);




















int[] arr = new int[3]; //0,0,0
arr[0] = 5; 
arr[1] = 10;
arr[2] = 20;











int[] arr = new int[3];
arr[0]---代表arr中的第1个元素
arr[1]---代表arr中的第2个元素
arr[2]---代表arr中的第3个元素
arr[3]












int a=0;
int b=0;
int c=0;
b=100;










//声明int型数组a，包含10个元素
//每个元素都是int型，默认值为0
int[] a = new int[10];
//声明double型数组d，包含20个元素
//每个元素都是double型，默认值为0.0
double[] d = new double[20];
//声明boolean型数组b，包含40个元素
//每个元素都是boolean型，默认值为false
boolean[] b = new boolean[40];















int   a; //声明int型变量，名为a
int[] a; //声明int型数组变量，名为a













最基本的，最简单的数据结构








将10000本书按照图书类别不同来保存-数据结构
java编程艺术---算法简单

将10000本书按照出版社的不同来保存-数据结构
java编程艺术---算法不简单






按照类别分类存储


一本一本一本的找------算法
将书分类放------------数据结构











关键字
保留字

实际需求中，没有哪种情况需要把所有层跳出去





for(int i=1;i<=1000;i++){
  for(int j=1;j<=2000;j++){
    for(int k=1;k<=3000;k++){
      break;
    }
  }
}




10*20*30----6000000000


i=1
  j=1
    k=1到30
  j=2
    k=1到30
  ...
i=2
  j=1/2/3/.../20/21
i=3















