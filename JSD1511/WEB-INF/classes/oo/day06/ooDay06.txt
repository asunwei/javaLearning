回顾:
1.static final常量:
    必须声明同时初始化，类名点来访问，不能改
    大写
    编译时直接被替换为具体的值---效率高
2.抽象方法:
    abstract，只有方法的定义，没有方法的实现
3.抽象类:
  1)由abstract修饰
  2)包含抽象方法的类必须是抽象类
  3)不能被实例化
  4)需要被继承的，子类:
    4.1)重写父类的所有抽象方法
    4.2)也声明为抽象类
  5)抽象类的意义:
    5.1)封装公共的
    5.2)为所有子类提供公共的类型
    5.3)可以包含抽象方法，为子类提供统一的入口
4.接口:
  1)是一个标准、规范
  2)由interface定义
  3)常量和抽象方法
  4)不能被实例化
  5)需要被实现的，实现类:
      必须重写接口中的所有抽象方法
  6)一个类可以实现多个接口，
    若又继承又实现时，应先继承后实现
  7)接口可以继承接口

class Six extends Shape{
  publix Six(double c){
    this.c = c;
  }
  public double area(){
    return 0.0721*c*c;
  }
}


interface CCB extends UnionPay{
  public boolean payFire(double money);
}
class CCBImpl implements CCB{ //建行卡
  重写4个
}


设计规则:
1)将公共的属性和行为，抽到父类中
2)所有子类行为都一样，做成普通方法
  所有子类行为不一样，做成抽象方法
3)符合既是也是的规则，使用接口


interface 企业技术顾问{
  培训员工();
  解决问题();
}
interface 技术图书作者{
  编辑稿件();
}
abstract class 达内职员{
  姓名，年龄，工资
  上班打卡(){ 按手纹、拍照 }
  下班打卡(){ 按手纹、拍照 }
  abstract 完成工作();
}
class 讲师 extends 达内职员 implements 企业技术顾问，技术图书作者{
}
class 达内教学副总裁 extends 达内职员 implments 企业技术顾问，技术图书作者{
}
class 项目经理 extends 达内职员 implements 技术图书作者{
}
class 班主任 extends 达内职员{
}

达内教学副总裁:
  培训员工、解决问题、编辑稿件
讲师:
  培训员工、解决问题、编辑稿件
项目经理:
  编辑稿件









笔记:
1.多态:
  1)多态的意义:
    1.1)同一类型的引用指向不同对象时，有不同的实现
        ----行为的多态: cut()、run()
    1.2)同一个对象被造型为不同类型时，有不同的功能
        ----对象的多态: 我、水
  2)向上造型:
    2.1)父类型的引用指向子类的对象
    2.2)能向上造型为的类型:
          父类、所实现的接口
    2.3)能点出来什么，看引用的类型
        重写方法被调用时，看对象的类型
  3)强制类型转换，成功的条件:
    3.1)引用所指向的对象，就是该类型
    3.2)引用所指向的对象，实现了该接口
  4)强转若不符合如上两个条件，则发生类型转换异常，
    建议:强转之前先通过instanceof来判断，而后再强转
    instanceof判断引用的对象是否是某类型，返回boolean型结果
              强转成功的条件就是它为true的条件
2.成员内部类:
  1)类中套类，里面的称为内部类，外面的称为外部类
  2)内部类通常只服务于外部类，对外不具备可见性
  3)内部类对象通常是在外部类中创建
  4)内部类中可以直接访问外部类中的成员(包括私有的)
    内部类中有一个隐式的引用指代创建它的外部类的对象
      外部类名.this.----eg: Mama.this.
3.匿名内部类:
  1)想创建一个类的对象，并且对象只创建一次，
    该类不必命名，称之为匿名内部类
  2)匿名内部类中访问外面的变量，该变量必须是final的

4.面向对象三大特征:
  1)封装:
    1.1)类:封装对象的属性和行为
    1.2)方法:封装具体的功能的实现
    1.3)访问控制修饰符:封装访问的权限
  2)继承:
    2.1)作用:有利于代码的复用
    2.2)父类/基类:共有的
        子类/派生类:特有的
    2.3)子继承父后，具有:父的+子的
  3)多态:
    3.1)意义:行为的多态、对象的多态
    3.2)向上造型、强制类型转换、instanceof
    3.3)表现形式:
          重写、重载

5.面向对象课程小结:
  1)什么是类？什么是对象？
    如何创建类？如何创建对象？
    引用类型之间画等号
    null和NullPointerException
  2)方法的重载
    构造方法
    this
    引用类型数组
  3)内存管理:堆、栈、方法区
    继承
    super
    向上造型
  4)方法的重写
    重写与重载的区别
    package、import
    访问控制修饰符
    static
    final
    static final
  5)抽象方法
    抽象类
    接口
  6)多态:意义、向上造型
         强制类型转换、instanceof
    内部类:成员内部类、匿名内部类


任务:
1.农行ATM案例------做完整
2.面向对象的总结
3.课后作业+每日一练









System.out.println();
System.out.println(5);
System.out.println(2.56);
System.out.println(true);
System.out.println("Hello");







cut()-----重写了
我--------重写了



























面试题:内部类有独立的.class吗?
       ------有


Mama$Baby.class
NstClassDemo$1.class
NstClassDemo$2.class
NstClassDemo$3.class





NstClassDemo










InnerClassDemo


Aoo o1 = new Aoo();
Boo o2 = new Boo(); //编译错误

class Aoo{
  
  class Boo{
  }
}












农行ATM机:
1)所有卡都能插
2)只有农行卡才能支付电话费



ABCATM atm = new ABCATM(); //农行atm机对象
UnionPay card = new ICBCImpl(); //银联卡-农行卡
atm.insertCard(card);
atm.payTelBill();

class ABCATM{ //农行ATM机
  private UnionPay card; //银联卡
  public void insertCard(UnionPay card){ //插卡
    this.card = card;
  }
  public void payTelBill(){ //支付电话费
    if(card instanceof ABC){
      ABC abcCard = (ABC)card;
      abcCard.payTelBill();
    }else{
      System.out.println("不是农行卡，不能支付电话费");
    }
  }  
}



远远不够
多想、多练





明确:
1)ATM上会有很多的按钮
2)点按钮后实质上操作的是那张卡
3)ATM上只是一堆方法的入口


















class Cell{
  int row;
  int col;
}

class T{
  Cell[]
}

class 我{
  老公
}





农行卡:
1)查余额
2)取款
3)检查密码
4)支付电话费













MultiTypeDemo



Aoo o1 = new Boo(); //向上造型
Boo o2 = (Boo)o1;
Inter1 o3 = (Inter1)o1;
Coo o3 = (Coo)o1; //异常ClassCastException

if(o1 instanceof Coo){
  Coo o3 = (Coo)o1;
}









System.out.println(o1 instanceof Boo); //true
System.out.println(o1 instanceof Inter1); //true
System.out.println(o1 instanceof Coo); //false



interface Inter1{
}
class Aoo{
}
class Boo extends Aoo implements Inter1{
}
class Coo extends Aoo{
}















父类大、子类小

人 o1 = new 理发师(); //向上造型，自动类型转


1)自动类型转:小到大
2)强制类型转:大到小












水作为不同形态时，所能干的事也是不一样的


我这个对象是多态的

我 me = new 我();
讲师       o1 = me; //向上造型
孩子他妈   o2 = me;
老公的老婆 o3 = me;

o1.讲课();
o2.揍他();
o3.咬他();
o3.收工资();


interface 讲师{
  讲课();
}
interface 孩子他妈{
  揍他();
}
interface 老公的老婆{
  咬他();
  收工资();
}
class 我 implements 讲师,孩子他妈,老公的老婆{
  讲课(){}
  揍他(){}
  咬他(){}
  收工资(){}
}













run()行为也是多态的
动物 a1 = new 老虎();
动物 a2 = new 鱼();
动物 a3 = new 鸟();
a1.run();
a2.run();
a3.run();


abstract class 动物{
  abstract run();
}
class 老虎 extends 动物{
  run(){ 在地上跑 }
}
class 鱼 extends 动物{
  run(){ 在水里游 }
}
class 鸟 extends 动物{
  run(){ 在天上飞 }
}















cut()行为就是多态的
人 p1 = new 理发师();
人 p2 = new 外科医生();
人 p3 = new 演员();

p1.cut(); //剪发
p2.cut(); //开刀
p3.cut(); //停止表演



abstract class 人{
  abstract cut();
}
class 理发师{
  cut(){ 剪发 }
}
class 外科医生{
  cut(){ 开刀 }
}
class 演员{
  cut(){ 停止表演 }
}








