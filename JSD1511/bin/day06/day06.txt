回顾:
1.三种循环更佳适用情况
  while:当
  do...while:直到
             1和3要素相同
  for:固定次数
2.嵌套循环:
    循环中套循环
    外层走一次，内层走所有次
    层数越少越好
3.数组
    相同数据类型元素的集合
    是一种数据类型(引用类型)
    int[] arr = new int[3];
    int[] arr = {1,3,5};
    int[] arr = new int[]{1,3,5};
    arr[0] = 100;
    System.out.println(arr[arr.length-1]);
    for(int i=0;i<arr.length;i++){
      System.out.println(arr[i]);
    }
    System.arraycopy(a,1,a1,0,4);
    int[] a1 = Arrays.copyOf(a,6);
    a = Arrays.copyOf(a,a.length+1);
    Arrays.sort(arr);
    冒泡排序

2到100之间的质数------常见的面试题

质数:素数，只能被1和它本身整除的数

5是质数:
 5%2/3/4---------都不得0
7是质数:
 7%2/3/4/5/6-----都不得0
8不是质数:
 8%2/3/4/5/6/7---有得0
9不是质数:
 9%2/3/4/5/6/7/8-有得0



不是质数:只要有得0的
是质数:取余所有都不得0的


num=100;
i=2/3/4/.../98/99
i=2/3/4/.../49/50
i=2/3/4/.../9/10

Math.sqrt(100);


25平方根为5
100平方根为10






并非一次判断就能得到最终结果----开关

奇数，偶数








给我一个数，判断是否是质数










正课:
1.方法:也称函数，或者叫过程
  1)封装一段特定的逻辑功能
  2)方法应尽可能的独立，一个方法只干一件事
  3)优点:
      避免代码重复、结构清晰、
      便于维护、便于合作开发

方法的定义：
  修饰词，返回值类型，方法名（参数列表）｛
        方法体
  ｝

猜字符游戏:
一.设计数据结构:变量
1)char[] chs;   //随机生成的字符数组
2)char[] input; //用户输入的字符数组
3)int[] result; //对比的结果
4)int score;    //得分
  int count;    //猜错的次数
二.设计程序结构:方法
1)主方法:
  public static void main(String[] args){
  }
2)随机生成字符数组:
  public static char[] generate(){
    char[] chs = new char[5];
    //...
    return chs;
  }
3)对比:随机字符数组与用户输入的字符数组
  public static int[] check(char[] chs,char[] input){
    int[] result = new int[2];
    //...
    return result;
  }
三.设计算法:方法体
1)接收用户输入的字符串
  String str = scan.next();
2)去掉str两边的空格
  str = str.trim();
3)将字符串转换为大写字母
  str = str.toUpperCase();
4)将字符串转换为字符数组
  char[] input = str.toCharArray();
5)判断字符串与某个数据是否相等
  if(str.equals("EXIT")){
  }





如果代码你明白，还能自己写出来---最好
如果代码你不明白，也得写出来

不明白就生写
写着写着就明白了
往里面带数


脑袋不想动







int num = 250; //藏起来一个数
提示猜吧!!!!!用户输入一个数据
对比未猜对提示太大了或太小了
    猜对了提示结束了


String s  = scan.next();
char[] input = s.trim().toCharArray();



基本类型判断相等与否，用==







"ABCDE"
input[0]='A'
input[1]='B'
input[2]='C'
input[3]='D'
input[4]='E'






while(){
}

do{
}while();













char[] chs = {'A','B','C'};
System.out.println(chs);


int[] arr = {2,3,6};
for(int i=0;i<arr.length;i++){
  System.out.println(arr[i]);
}










Math.random()-----0到0.9999999...

数组的下标就是数字

public static char[] generate(){
  char[] chs = new char[5];
  char[] letters = {'A','B','C','D'...,'Z'};
  boolean[] flags = new boolean[letters.length];
  for(int i=0;i<chs.length;i++){
    do{
      int index = (int)(Math.random()*26); //0到25
    }while(flags[index]==true);

    chs[i]=letters[index];
    flags[index] = true; //已存过
  }
  return chs;
}
/*
		 * i=0 index=0  chs[0]='A' flags[0]=true
		 * i=1 index=25 chs[1]='Z' flags[25]=true
		 * i=2 index=0/25/0/25/0/25/0/25/0/25/1 chs[2]='B' flags[1]=true
		 * i=3
		 * i=4
		 */













i=0 index=0  chs[0]='A'
i=1 index=25 chs[1]='Z'
i=2 index=2  chs[2]='C'
i=3 index=0  chs[3]='A'
i=4














public static int[] check(char[] chs,char[] input){
  //result[0]为位置对个数
  //result[1]为字符对个数
  int[] result = new int[2]; //0,0
  
  for(int i=0;i<chs.length;i++){
    for(int j=0;j<input.length;j++){
      if(chs[i]==input[j]){ //字符对
        result[1]++; //字符对个数增1
	if(i==j){ //位置对
	  result[0]++; //位置对个数增1
	}
        break;
      }
    }
  }

  return result;
}





位置对是在字符对的基础之上的







练习:
public static void main(String[] args){
  say();
  sayHi("zhangsan");
  int a = getNum();  输出a
  double b = plus(2.2,3.3); //输出b
}
public static void say(){ }
public static void sayHi(String name){ }
public static int getNum(){
  return 250;
}
public static double plus(double a,double b){
  return a+b;
}
















排序------20次

调一次----1句

sort(){
  6句话
}


main(){
  调存钱()---1句
  调取钱()---1句
  调转帐()---1句
}
存钱(){
  500句
}
取钱(){
  1000句
}
转帐(){
  1500句
}


MethodDemo



方法可以有参数也可以没参数，但()不能省
有参可以使程序更灵活


int      age = scan.nextInt();
double     b = scan.nextDouble();
double     a = Math.random();

System.out       .println("HelloWorld");
System           .arraycopy(a,1,a1,0,4);
Arrays           .sort(arr); //没有返回值
double b = Math  .sqrt(25);
int[] a1 = Arrays.copyOf(a,6);


double a = Math.sqrt(100);
double b = Math.random();
            0到0.99999999....






方法可以有返回值，也可以没有返回值
没有返回值，则返回值类型写成void
如果有返回值，则写成特定的类型即可

何时有返回值?
----若方法执行完之后，
    还需要用到方法中的某个数

System.out.println("HelloWorld");
System.arraycopy(a,1,a1,0,4);
Arrays.sort(arr); //没有返回值

int      age = scan.nextInt();
double price = scan.nextDouble();
double     a = Math.random();
double     b = Math.sqrt(25);
int[]     a1 = Arrays.copyOf(a,6); //有返回值









每个方法都有自己特殊的意义
每个方法都专门干了一件事


















项目-----只要安排在这里，
         说明只要你努力，就还是可以跟上的

学东西最快的时间
-----不是学语法的时间
-----而是做项目




