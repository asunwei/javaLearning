回顾:
1.方法的重载(overload):
    一个类中，方法名相同，参数列表不同
    编译器编译时自动根据签名绑定调用的方法
2.构造方法:
    给成员变量初始化
    与类同名，没有返回值类型
    new对象时被自动调用
    自己不写则默认一个无参，自己写了则不再默认提供
    可以重载
3.this:指代当前对象，哪个对象调指的就是哪个对象
       方法中访问成员变量之前，默认有个this.
  1)this.成员变量名
  2)this.方法名()
  3)this()
4.引用类型数组
    Cell[] cells = new Cell[4];
    cells[0] = new Cell(2,5);

    int[][] arr = new int[3][];
    arr[0] = new int[2];
    
    int[][] arr = new int[3][4];


class O{
  Cell[] cells;
  O(){
    this(0,0);
  }
  O(int row,int col){
    cells = new Cell[4];
    cells[0] = new Cell(row,col);
    cells[1] = new Cell(row,col+1);
    cells[2] = new Cell(row+1,col);
    cells[3] = new Cell(row+1,col+1);
  }
  void drop(){}
  void moveLeft(){}
  void moveRight(){}
  void print(){}
}






正课:
1.内存管理:由JVM管理
  1)堆:存储所有new出来的对象，包括成员变量
    1.1)成员变量的生命周期:
          new对象时存在堆中，对象被回收时成员变量一并消失
    1.2)没有任何引用指向的对象即为垃圾
        垃圾回收器(GC)不定时到堆中清扫垃圾
	想快一点回收调用System.gc()
	过程是透明的(看不到的)
    1.3)内存泄露:不再使用的对象没有被及时的回收
          建议:不再使用的对象及时将引用设置为null
  2)栈:存储正在运行的方法中的所有局部变量
    2.1)调用方法时在栈中为该方法分配一块对应的栈帧，
        栈帧中存储该方法所有的局部变量(局部变量+参数)，
	方法调用结束后，栈帧被清除，局部变量随之消失
    2.2)局部变量的生命周期:
          方法被调用时存在栈中，方法结束栈帧被清除时一并消失
  3)方法区:存储.class字节码文件(包括方法)
    3.1)方法只有一份
        能过this来区分具体的对象
2.继承:
  1)作用:有利于代码的重用
  2)通过extends实现继承
  3)父类:共有的属性和方法
    子类:特有的属性和方法
  4)子类继承父类后，子类具有:
      4.1)父类所共有的
      4.2)子类所特有的
  5)一个父类可以有多个子类
    一个子类只能有一个父类---单一继承
  6)继承具有传递性,可以使用父类的父类方法
  7)java规定:构造子类之前必须先构造父类
    在子类构造中必须通过super调用父类的构造方法
    若自己不写则编译默认默认提供super()调父类的无参构造
    若自己写了则不再默认提供
    super()必须位于子类构造的第一句
3.super:指代当前对象的父类对象
  1)super.成员变量名---访问父类的成员变量
  2)super.方法名()-----调用父类的方法
  3)super()------------调用父类的构造方法
4.向上造型:
  1)父类型的引用指向子类的对象
  2)能点出来什么，看引用的类型


任务:
1.练习向上造型
2.在记事本中创建:
    Cell、Tetromino、T、J、TJTest







class Cell{
}
class Tetromino{
}
class T extends Tetromino{
}
class J extends Tetromino{
}
class TJTest{
  public static void main(String[] args){
    
  }
}















Tetromino o1 = new T();
Tetromino o2 = new J();
Tetromino o3 = new O();









Person p1 = new Student();
Person p2 = new Teacher();
Person p3 = new Doctor();














//动物是动物
Animal o1 = new Animal();
//老虎是老虎
Tiger o2 = new Tiger();
//老虎是动物
Animal o3 = new Tiger();  //向上造型

//动物是老虎----语义不通
Tiger o4 = new Animal();


class Animal{ //动物类
}
class Tiger extends Animal{ //老虎类
}















T型的参数，只能接收T型对象
J型的参数，只能接收J型对象
O型的参数，只能接收O型对象
----7个方法的重载

假如:
  有一种类型，既能接收T型对象
              也能接收J型对象
	      也能接收O型对象
	      ......



















何时打*:只要i和j与row和col配上
何时打-:4个格都没配上才打-


并非一次判断得到最终结果-----开关







for(int i=0;i<20;i++){
  for(int j=0;j<10;j++){
    if(i==tt.cells[0].row && j==tt.cells[0].col
       ||
       i==tt.cells[1].row && j==tt.cells[1].col
       ||
       i==tt.cells[2].row && j==tt.cells[2].col
       ||
       i==tt.cells[3].row && j==tt.cells[3].col){
      System.out.print("* ");
    }else{
      System.out.print("- ");
    }
				
				
			}
			System.out.println();
		}






class Aoo{
  int a;
  void show(){}
}
class Boo extends Aoo{
  int b;
  void say(){}
}
class Coo extends Boo{
  int c;
  void test(){}
}

Coo o = new Coo();
o.c/test();
o.b/say();
o.a/show();










Tetromino




Student zs = new Student();
zs.className/study(); //子类的
zs.name/age/address/eat()/sleep(); //父类的


class Person{ //父类
  String name;
  int age;
  String address;
  void eat(){}
  void sleep(){}
}
              继承
class Student extends Person{ //子类
  String className;
  void study(){}
}
class Teacher extends Person{
  double salary;
  void teach(){}
}
class Doctor extends Person{
  String level;
  void cut(){}
}
















程序中的继承:
  代码不需要自己写，自己也能用


生活中的继承:
1.继承财产:
    钱不需要自己挣，自己也能花
2.继承皇位:
    江山不需要自己打，自己也能坐
3.继承工作:
    工作不需要自己找，自己也能干



















class Aoo{
  int a;
  void test(int b){
    int c;
    System.out.println(a); //0
    System.out.println(c); //编译错误
  }
}














System.gc();


透明的，看不到的






内存泄露:

对象不用了，及时将引用设置为null





C++:创建对象，必须由程序员来手动释放
java:自动垃圾回收



















java程序，报内存不足
----------JVM的内存不足

2G内存条，装到电脑上----电脑加内存了
如何解决: 给JVM加内存














