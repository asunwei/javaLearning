回顾:
1.方法的重写(override):重新写，覆盖
  1)父子类中，方法名相同，参数列表相同，方法体不同
  2)重写方法被调用时，看对象的类型
2.重写与重载(overload)的区别
    重写:运行期绑定，看对象调用方法
    重载:编译期绑定，看引用绑定方法
3.package:避免类的命名冲突
  import:声明类/引入类
    不同包访问:
    1)先import，再使用
    2)全称
4.访问控制修饰符:
  public:公开的，任何类
  private:私有的，本类
  protected:受保护的，本类、子类、同包类
  默认:什么也不写，本类、同包类

  数据私有化，行为公开化
  类只能是public和默认的
  类中成员如上4种都可以
5.static:静态的
   属于类的，存在方法区，只有一份
   由类名点来访问
   静态变量:所有对象数据都一样时使用
   静态方法:没有隐式的this传递，不可以直接访问实例成员
            方法的操作仅与参数有关而与对象无关
   静态块:类被加载时自动执行，
          因类只加载一次，所以静态块也只执行一次
6.final:不可变的
    修饰变量:变量不能被改变
    修饰方法:方法不能被重写
    修饰类:  类不能被继承













class Aoo{
  int a;
  void show(){
  }
  class Boo{ //内部类
  }
}

Boo o = new Boo();


package a;
class Aoo{
}

package b;
class Aoo{
}

同时使用不同包中相同类包的类
package c;
class Coo{
  void show(){
    a.Aoo o = new a.Aoo();
  }
}














笔记:
1.static final:常量
  1)必须声明同时初始化
  2)由类名点来访问，并且不能改变
  3)建议:常量名所有字母大写
  4)常量在编译期被直接替换为具体的值--效率高
2.抽象方法:
  1)由abstract修饰
  2)只有方法的定义，没有方法的具体实现(连大括号都没有)
3.抽象类:
  1)由abstract修饰
  2)包含抽象方法的类必须是抽象类
    没有抽象方法的类也可以声明为抽象类--我愿意
  3)抽象类不能被实例化(new对象)
  4)抽象类都是需要被继承的，子类:
    4.1)重写抽象类中的所有抽象方法
    4.2)也声明为抽象类---一般不这样做
  5)抽象类的意义:
    5.1)父类的意义:
    5.1.1)封装所有子类共有的属性和方法
	5.1.2)为所有子类提供一种公共的类型--向上造型
    5.2)可以包含抽象方法，为所有子类提供一种统一的入口
4.接口:
  1)是一个标准、规范
    遵守这个标准，就能干某件事-----API后
  2)由interface定义
    只能包含常量和抽象方法
  3)接口不能被实例化
  4)接口是需要被实现的，实现类/子类:
      必须重写接口中的所有抽象方法
  5)一个类可以实现多个接口，用逗号分隔
    若既继承又实现时，应先继承后实现
  6)接口可以继承接口




任务:
1.银行卡系统案例














balance为卡的余额
number为取的金额

balance-number==0-------意味着正好
balance-number>=2000----减完后剩2000
balance-number>=-2000---超2000

if((balance-number)>=-2000){
  balance-=number;
  return true;
}
return false;


double num = input.nextDouble();




银行卡系统:

interface UnionPay{ //银联接口
  存();
  取();
  转帐();
  查余额();
}
interface CCB extends UnionPay{ //建行接口
  支付燃气费();
}
interface ABC extends UnionPay{ //农行接口
  支付电话费();
}
interface ICBC extends UnionPay{ //工行接口
  在线支付();
}


UnionPayTest

class CCBImpl implements CCB{ //建行卡
  存(){}
  取(){}
  转帐(){}
  查余额(){}
  支付燃气费(){}
}

class ABCImpl implements ABC{ //农行卡
  存(){}
  取(){}
  转帐(){}
  查余额(){}
  支付电话费(){}
}

class ICBCImpl implements ICBC{ //工行卡
  存(){}
  取(){}
  转帐(){}
  查余额(){}
  在线支付(){}
}














InterfaceDemo









类和类---------继承extends
接口和接口-----继承extends
类和接口-------实现implments



new Inter1(); //编译错误，接口不能被实例化
Inter1 o1; //正确的，

Inter2 o1 = new Aoo(); //向上造型
Inter1 o2 = new Aoo(); //向上造型


interface Inter1{
  void a();
}
interface Inter2 extends Inter1{
  void b();
}
class Aoo implements Inter2{
  public void b(){}
  public void a(){}
}














interface Inter1{
  void a();
}
interface Inter2{
  void b();
}
abstract class Aoo{
  abstract void c();
}
class Boo extends Aoo implements Inter1,Inter2{
  public void a(){}
  public void b(){}
  void c(){}
}










接口是对继承的单根性的扩展

interface Inter1{
  void a();
  void b();
}
class Aoo implements Inter1{
  public void a(){}
  public void b(){}
}











interface Inter1{
  public static final int NUM = 5;
  public abstract void show();
  double PI=3.14159; //默认public static final
  void sayHi(); //默认public abstract


  int a; //编译错误
  public void say(){} //编译错误
}








生活中的接口:
1)电脑厂商USB接口-----------制定标准、规范
  U盘、摄像头、鼠标等厂商---遵守标准、规范
2)国家对开发商--------------制定标准、规范
  国家对家具----------------制定标准、规范
  开发商、家具厂商----------遵守标准、规范
3)银行----------------------制定标准、规范
  银行卡--------------------遵守标准、规范











银行卡系统


















//凡是动物都能跑-------

abstract class 动物{
  abstract 跑();
}
class 鸟 extends 动物{
}
class 老虎 extends 动物{
}
class 鱼 extends 动物{
}










abstract class Shape{ //抽象类-不完整
  double c; //周长
  abstract double area(); //抽象方法-不完整
}
class Square extends Shape{
  double area(){ //重写--变不完整为完整
    return 0.0625*c*c;
  }
}
class Circle extends Shape{
  double area(){
    return 0.0796*c*c;
  }
}








new T();
new J();
new O();
new Tetromino(); //永远也不会做的


abstract class Tetromino{ //我愿意
  Cell[] cells;
  void drop(){}
  void moveLeft(){}
  void moveRight(){}
  void print(){}
}
class T extends Tetromino{
}
class J extends Tetromino{
}
class O extends Tetromino{
}















给我一组图形，找出这组图形中的最大面积


Shape s1 = new Square(1);
Shape s2 = new Circle(1);
Shape s3 = new Six(1);


Shape[] shapes = new Shape[9];
shapes[0] = new Square(1); //向上造型
shapes[1] = new Square(2); 
shapes[2] = new Square(3); 
shapes[3] = new Circle(1);
shapes[4] = new Circle(2); 
shapes[5] = new Circle(3); 
shapes[6] = new Six(1);
shapes[7] = new Six(2); 
shapes[8] = new Six(3); 

double max = shapes[0].area();
for(int i=1;i<shapes.length;i++){
  double area = shapes[i].area();
  if(area>max){
    max = area;
  }
}
System.out.println("最大面积为:"+max);


能点出来谁，看引用
重写方法被调时，看对象


abstract class Shape{ //抽象类-不完整
  double c; //周长
  abstract double area(); //抽象方法-不完整
}
class Square extends Shape{
  double area(){ //重写--变不完整为完整
    return 0.0625*c*c;
  }
}
class Circle extends Shape{
  double area(){
    return 0.0796*c*c;
  }
}



Square[] ss = new Square[3];
ss[0] = new Square(1);
ss[1] = new Square(2);
ss[2] = new Square(3);

Circle[] cs = new Circle[3];
cs[0] = new Circle(1);
cs[1] = new Circle(2);
cs[2] = new Circle(3);

Six[] sixs = new Six[3];
sixs[0] = new Six(1);
sixs[1] = new Six(2);
sixs[2] = new Six(3);

1)找到ss中的最大面积---sMax
2)找到cs中的最大面积---cMax
3)找到sixs中的最大面积---sixMax
4)找到sMax与cMax与sixMax中的最大值--max
















abstract class Shape{ //抽象类--不完整
  double c;
  abstract double area(); //抽象方法--不完整
}
class Square extends Shape{ //方形
  double area(){ //重写抽象area()--变不完整为完整
    return 0.0625*c*c;
  }
}
class Circle extends Shape{ //圆形
  double area(){
    return 0.0796*c*c;
  }
}






abstract class Six extends Shape{ //六边形
}










Shape s; //正确
new Shape(); //编译错误


Car car = new Car();

abstract class Car{ //不完整
  void run(){
    能跑
  }
  abstract void stop(); //不完整
}














